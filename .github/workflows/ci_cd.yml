# Название вашего пайплайна
name: Version update runner

#Триггер на события, которые производятся по пушу или мерджу 
# on:
#   push:
#     branches: [ "master", "develop" ]
on:
  pull_request:
    # На какие типы событий он должен работать
    #types: [opened, synchronize, reopened, closed, assigned, unassigned, labeled, unlabeled, edited]
    types: [closed]
    branches:
      - release
env:
  TYPE_BRANCH: none
  NAME_VERSION_FILE: version

#JOBS list for update versions 
jobs:
  pre-merge-check:
    runs-on: ubuntu-latest
    outputs:
      type_branch_f: ${{ steps.feature-branch.outputs.type_branch_f }}
      type_branch_h: ${{ steps.hotfix-branch.outputs.type_branch_h }}
    steps:
      
      # use special lib for parse branch names 
      - name: Get branch names
        id: branch-names
        uses: tj-actions/branch-names@v8
      
      # print info about variables and parsed branches
      - name: Print info
        id: print-info
        run: |
          echo "EVENT NAME    : ${{ github.event_name }}"
          echo "ACTION        : ${{github.event.action }}"
          echo "EVENT NAME    : ${{ github.event_name }}"
          echo "IS            : ${{github.event.pull_request.merged}}"
          echo "CURRENT BRANCH: ${{ steps.branch-names.outputs.current_branch }}"
          echo "REF           : ${{github.ref}}"
          echo "REF NAME      :${{github.ref_name}}"
          echo "DEFAULT BRANCH:${{ steps.branch-names.outputs.default_branch }}"
      
      # check if branch feature 
      - name: Check [FEATURE]
        id: feature-branch
        if: contains(steps.branch-names.outputs.current_branch,'feature')
        run: | 
          echo "Merge [feature] -> [release]"
          echo "type_branch_f=feature" >> "$GITHUB_OUTPUT"
      
      # TASK for check if branch hotfix
      - name: Check [HOTFIX] 
        id: hotfix-branch
        if: contains(steps.branch-names.outputs.current_branch,'hotfix')
        run: | 
          echo "Merge [hotfix] -> [release]"
          echo "type_branch_h=hotfix" >> "$GITHUB_OUTPUT"
        
        
  # SHow VERSION FILE
  generate-version:
    runs-on: ubuntu-latest
    #wait pre merge check 
    needs: pre-merge-check
    outputs:
      output1: ${{steps.get-info.outputs.content}}
    #steps by step
    steps:
      - name: Search current directory
        run: pwd

      - name: Show artefact in dir  
        run: ls -la

        # checkout on release bacnh and 
        # show content of version file 
      - name: checkout
        uses: actions/checkout@v2

        #Show old content of version file 
      - name: Print info about ${{env.NAME_VERSION_FILE}} 
        id: get-info
        run: |
          content=$(cat ${{env.NAME_VERSION_FILE}})
          echo "content='$content'" >> "$GITHUB_OUTPUT"
        
  # start update vesion files       
  update-version-file:
    # IMPORTANT!
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: generate-version
    steps:
        # update minor version
      - name: Check update version MINOR
        # env:
        #   OUTPUT1: ${{needs.generate-version.outputs.output1}}
        run: | 
          echo " new ${{needs.generate-version.outputs.output1}}"
        #if: ${{ env.TYPE_BRANCH == 'feature' }}
        #run: echo "Update minor version"

        # обновляем патч версию
      - name: Check update version PATCH 
        if: ${{ env.TYPE_BRANCH == 'hotfix' }}
        run: echo "Update hotfix version"
      
      # checkout on branch 
      - name: checkout
        uses: actions/checkout@v2

      # save current date 
      # here we will run py script for parse file 
      - name: save current date
        run: |
          echo "1.0.0" >> ${{env.NAME_VERSION_FILE}}

      # setup user which will be commit
      # setup the username and email. I tend to use 'GitHub Actions Bot' with no email by default
      - name: setup git config for github bot 
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

      #commit
      - name: commit modify [version] file
        run: |
          git add .
          git commit -m "version up [x.x.x] <- [x.x.x]"
          git push origin release

      #   # Ничего не обновляем и выходим
      # - name: Check update version MINOR 
      #   if: ${{ env.TYPE_BRANCH == 'none' }}
      #   run: | 
      #     echo "Nothing to update"
      #     # exit 0
              
      
    

  
